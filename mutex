
  
pragma solidity >=0.4.22 <0.6.0;   

import "./my_tracking_contract.sol"; 
contract MyBiddingContract { 

  //////////////////////////////////start
    bool locked;
  
  
  modifier noReentrancy() {
        require(!locked);
        locked = true;
        _;
        locked = false;
 }

     
  
  

    //contract balance 
    uint public contractbalance; 

    //bidding parameters.  

    address public owner; 

    string public city;// 

    uint public distance; //1 

    uint constant  maxBidValue = 1000;  

    uint public winningBid= maxBidValue; 

    uint public biddingclosetime; 

    uint public minumumParticipationFee = 1; //1 USD you define .it should be constant  

    uint public reputationfactor; 

     

    //Bidding will close wit hin specified seconds after the contract is deployed 

    address public winningBidder; 

    address public wholeseller; 

     

    // Allowing withdrawals of previous bids 

    mapping(address => uint) returnsPending; 

    // Will be set true once the bidding is complete, preventing any further change 

    bool public biddingComplete; 

    bool authorized; 

     

    struct Carrier {                 

         
        bool authorized; 

        bool bidded; 

        uint reputationfactor;  

        uint  bidamount;   

        uint qualitylevel; 

     

    }  

     

     

     

    mapping(address => Carrier) public carriers; 

     

     

     

      


         

         

    function authorize(address party, uint _reputationfactor) public ownerOnly { 

        carriers[party].authorized = true; 

        carriers[party].reputationfactor= _reputationfactor; 

    }  

     

    //instansiate the tracking after completing  the  bidding; 

    MyTrackingContract public  myTackingContract; 

     

     

    // use     for  the  tracking 

    uint public initialTokenSupply; 

                                      

    // Events to fire when change happens 

    event BidValueDecreased(address bidder, uint bidAmount); 

    event biddingResult(address winner, uint bidAmount); 

    event Failure(string _message); 

    event contractClose(string _message); 

     

                    

    //not   secure 

    function Bidding(uint _initialTokenSupply,uint _biddingTime, address _beneficiary, string memory _city, uint _distance,address _wholeseller)  public { 

        owner = _beneficiary; 
        
        biddingclosetime = now + _biddingTime; 

        distance = _distance; 

        city = _city; 

        wholeseller=_wholeseller; 

        initialTokenSupply=_initialTokenSupply; 

    } 

     

    // Bidding is possible with the value sent along with this transaction 

    // Bid value is  refunded if the bidding is not won 

    function bid(uint qualitylevel) public payable { 

        // The keyword payable is required so the function receives Ether. 
        
         if(now>biddingclosetime || biddingComplete == true){ 

        emit contractClose("Bidding is close"); 

        emit biddingResult(winningBidder, winningBid); 

        } 

        

        else{ 

         

        require(msg.value>minumumParticipationFee,"low fees to bid "); 

        // If the bidding period is over, the call is reverted   

        require(msg.value- minumumParticipationFee< winningBid,"Bid amount is greater than maximum bid value"); 

         // If the bid is not less, the money is sent back. 

        require(carriers[msg.sender].authorized,"Un-authorized carrier"); 

         // If the carrier is not authorized, it cannot bid. 

        require(carriers[msg.sender].reputationfactor>5,"Carrier does not meet reputation factor criteria "); 

         

         

        carriers[msg.sender].bidded = true; 

        if (winningBidder != address(0)) { 

        returnsPending[winningBidder] += winningBid; 

        } 

       winningBidder = msg.sender; 

       winningBid = msg.value-1; 

        

       //fee  for after bidding 

       contractbalance +=msg.value-winningBid; 

        

       emit BidValueDecreased(msg.sender, msg.value); 

        

        

} 

    } 

    // To withdraw a non-winning   

    function withdraw() public returns (bool) { 

        require(now >= biddingclosetime,"Bidding process is still ungoing");  

        require (msg.sender != winningBidder,"You have won the bid, so cannot withdraw amount now."); 

        //address withdrawalaccount=msg.sender;  

        //uint withdrawalAmount = returnsPending[msg.sender]; 

        uint bidAmount = returnsPending[msg.sender]; 

        if (bidAmount > 0) { 

            returnsPending[msg.sender] = 0; 

            if (!msg.sender.send(bidAmount)) { 

                returnsPending[msg.sender] = bidAmount; 

                return false; 

            } 

        } 

  

        return true; 

    } 

     

     

    //When bidding ends, winning bid is sent to the beneficiary 

      function biddingClose() public noReentrancy { 

         

         

       require (msg.sender == owner,"Not authorized to make this request"); 

       // only  can end the biddind 

       require(now >= biddingclosetime,"Bidding is not closed");  

       // bidding should not have ended 

       require(!biddingComplete,"Bidding in process");  

      // If this function has already been called, it should complete 

        biddingComplete = true; 

         

        //owner get   the totalfee  of the contract bidding; 

        msg.sender.transfer(contractbalance); 

         

        // instance of the tracking contract; 

        myTackingContract=new MyTrackingContract(initialTokenSupply,address(this)); 

        emit biddingResult(winningBidder, winningBid); 

        // owner.transfer(winningBid); 

    }        


  

    function getbalance() public view  returns (uint){ 

        require (msg.sender == owner); 

        return address(this).balance; 

    } 

     

    modifier ownerOnly() { 

        require(msg.sender == owner); 

        _; 

    } 

     

     

    // //Kevin.......check contract biddingResult ( listen close contract in  dapp) 

    // function checkBiddingStatus() public { 

    //     require(now>biddingclosetime || biddingComplete == true, "Bidding is still open"); 

    //     emit contractClose("Bidding is close"); 

    //     emit biddingResult(winningBidder, winningBid); 

    // } 

      

    // //Kevin.....only winnerCarrier ,wholeseller and producer owner of  this bidding  contract 

    function getTrackingContractAddress() public requiredStakeholder view returns(address) { 

        return  address(myTackingContract); 

    }  

     

    //Kevin..... 

    modifier requiredStakeholder() { 

        require( biddingComplete == true); 

        require(msg.sender == owner && msg.sender ==winningBidder && msg.sender ==wholeseller ); 

        _; 

    }            

    ////////////////////////////////////////////////////////////////////////////////////////// end
    

}
